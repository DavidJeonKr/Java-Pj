package com.david.database01;

public class DatabaseMain01 {
	public static void main(String[] args) {
		//관계형 데이터베이스에서는 컴럼과 레코드로 구성된 테이블에 데이터를 저장
		// 테이블에서 SQL(Structured Query Language) 데이터를 추출하거나 저장할 수 있다.
		// 데이터베이스의 데이터를 관리하는 애플리케이션으로 
		// RDBMS(Relational Database Management System)를 사용한다
		//1
		//테이블
		//관계형 데이터베이스의 테이블은 컬럼과 레코드로 이루어져 있다.
		//모든 컬럼에는 저장할 수 있는 값의 종류가 정의되어 있다.
		//지정된 종류의 값만 저장할 있다.
		//열에 들어갈 수 있는 값의 정의를 정의역(도메인)이라고 부른다. 정의역에는 자바언어와 유사한 데이터형을 지정할 수 있다.
		//비트형: BIT, BIT VARYING
		//문자열형: CHARACTER, CHARACTER VARYING, NATIONAL CHARACTER, NATIONAL CHARACTER VARYING
		//정수형: INTEGER, DECIMAL, SMALLINT
		//소수형: SOUBLE PRECISION, FLOAT
		//날짜시간형: DATE, TIME, TIMESTAMP
		
		//키
		//테이블에는 특정한 하나의 레코드를 지정할 수 있는 컬럼이 존재한다. 이 컬럼을 키라고 한다.
		
		//논리설계: 현실 정보를 정리해 데이터로 보존할 대상을 결정하면, 보존할 대상을 엔티티(ENtity)
		//엔티티를 정의햇으면 엔티티 간의 릴레이션십을 결정. E-R 다이어그램(Entity0Relationship Diagram).
		// - 재고 수량을 관리하고 싶다
		// - 상품 매일 가격과 판매 가격을 관리하고 싶다
		// - 언제, 무엇이, 몇 개 팔렸는지 기록하고 싶다.
		// - 재고 수량을 저장할 엔티티
		// - 상품 가격을 저장할 엔티티
		// - 판매 기록을 저장할 엔티티
		// 엔티티들의 관게를 정의한다. 
		// 테이블의 정규화: 관게형 데이터베이스에서는 관리하고 싶은 데이터를 표로 저장한다.
		// 테이블은 실세계의 정보를 논리 설계로 모델화해서 함수 종속성에 따라 나누게 되는데, 이를 정규화라고 한다.
		// 함수 종속성이란 어떤 컬럼값이 정해지면 다른 컬럼값이 정해지는 관계를 말한다.
		// *개념: 1) 테이블은 설계해서 만들어진다는 것 2) 데이터는 정규화할 것
		// 정규화를 하는 이뉴는 제5정규형에 가까워질수록 데이터를 변경할 때 수정할 부분이 적어지기 때문이다.
		// 원리적으로 정규화를 진행하는 편이 데이터의 완전성을 유지하기 쉽고, 데이터에 모순이 일어나지 않는다.
		// 일반적인 업무 시스템에서는 제3정규형까지 정규화하면 충분, 또한 업무상 일부러 정규화를 무너뜨린 테이블 사용하는 경우도 있다.
		// 물리설계: 논리 설계를 바탕으로 이용할 RDBMS에 적합한 인덱스와 데이터형을 정의한다.
		// 
		// 관계형 데이터베이스는 SQL로 조작. SQL을 사용하려면 RDBMS가 가진 몇가지 기능을 이해해둘 필요가 있다. SQL의 분류와
		// 트랜잭션 처리, 동시 실행 제어.
		// *데이터 베이스를 조작하는 언어
		// 관계형 데이터베이스를 생성하고 활용하는 데 사용하는 데이터 베이스 언어를 SQL(Structured Query Language) 
		//    기능									의미				주요 역할
		// 1) DML(Data Manipulation Language) 	데이터 조작언어 		데이터 조작, 삽입, 갱신
		// 2) DDL(Data Definition Language)		데이터 정의 언어		데이터베이스 테이블, 인덱스 등의 생성,변경,삭제
		// 3) DCL(Data Control Language)		데이터 제어 언어		데이터베이스의 데이터에 대한 동작과 제어, 권한 부여와 박탈
		
		//트랜잭션 처리: RDBMS에서는 몇 가지 검색, 삽입, 갱신을 한 덩어리로 처리하는 방법
		
		
	}
}
